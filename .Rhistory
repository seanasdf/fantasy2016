#reassign rownames to merged projections
rownames(hitters) <- hitters$roster_spot
rownames(pitchers) <- pitchers$roster_spot
#add hitter projections to team
for (position in batter_positions) {
temp[position, c("playerid","AB","R","HR","RBI","SB","AVG")] <-
hitters[position, c("playerid","AB","R","HR","RBI","SB","AVG")]
}
#add pitcher projections to team
for (position in pitcher_positions) {
temp[position, c("playerid","IP","ERA","WHIP","SV","W","K")] <-
pitchers[position, c("playerid","IP","ERA","WHIP","SV","W","K")]
}
#add replacement level stats for empty hitter roster spots
for (position in batter_positions) {
if (temp[position,"name"] == "") {
temp[position,c("AB","R","HR","RBI","SB","AVG")] <- replacement_hitters[position,c("AB","Runs","HR","RBI","SB","AVG")]
}
}
#add replacement level stats for pitcher spots
for (position in pitcher_positions) {
if (temp[position,"name"] == "") {
temp[position,c("IP","ERA","WHIP","SV","W","K")] <- replacement_pitcher
}
}
assign(team, temp)
remove(hitters)
remove(pitchers)
remove(temp)
}
hitter_projections
setwd("/home/seanasdf/Documents/rstuff/fantasy")
library(dplyr)
###Load the coefficients data frame
load("coefs.rda")
###############################################################
################HITTER STUFF LIVES HERE#########################
################################################################
#Import and clean data on replacement levels
#read in league wide csv
replacement_hitters <- read.csv("replacement_hitters.csv", stringsAsFactors = FALSE)
replacement_hitters$Position <- c("catcher",
"first_base",
"second_base",
"shortstop",
"third_base",
"middle_infield",
"corner_infield",
"outfield",
"dh"
)
names(replacement_hitters)[2:6] <- sapply(names(replacement_hitters[c(2:6)]), paste, ".repl", sep="")
#rename columns
names(replacement_hitters) <- c("position",
"runs",
"hr",
"rbi",
"sb",
"avg")
#list of file names
filelocs <- sapply("./steamer/", paste, list.files("./steamer"), sep="")
#read in hitterdata
hitterdata <- lapply(filelocs, read.csv, header=TRUE, stringsAsFactors = FALSE)
#keep only variables I care about
hitterdata <- lapply(hitterdata, select, Name, Team, AB, PA, R,HR, RBI, SB, AVG, OBP, playerid)
#rename columns
hitterdata <- lapply(hitterdata, function(x) {colnames(x)[1] <- "name"
return(x)})
#create projection dataframes for each position
grab.repl <- function(pos) {
temp <- filter(replacement_hitters, position==pos)
names(temp)[2:6] <- sapply(names(temp)[2:6], paste, ".repl", sep="")
return(temp)
}
#1b
first.base.proj <- cbind(hitterdata[[1]], grab.repl("first_base"))
#2b
second.base.proj <- cbind(hitterdata[[2]], grab.repl("second_base"))
#3b
third.base.proj <- cbind(hitterdata[[3]], grab.repl("third_base"))
#C
catcher.proj <- cbind(hitterdata[[4]], grab.repl("catcher"))
#dh
dh.proj <- cbind(hitterdata[[5]], grab.repl("dh"))
#of
of.proj <- cbind(hitterdata[[6]], grab.repl("outfield"))
#SS
shortstop.proj <- cbind(hitterdata[[7]], grab.repl("shortstop"))
#build all positional projections into a list
hitter_projections <- list(first.base.proj,
second.base.proj,
third.base.proj,
catcher.proj,
dh.proj,
of.proj,
shortstop.proj)
#convert coefficients frame to a normal data frame
coefs.for.calc <- as.numeric(coefs$estimate)
names(coefs.for.calc) <- coefs$Category
#create function to calculate value for a position
calculate.value <- function(df) {
mutate(df,
marginal.hr = HR - hr.repl,
marginal.runs = R - runs.repl,
marginal.rbi = RBI - rbi.repl,
marginal.sb = SB - sb.repl,
marginal.avg = AVG - avg.repl,
marginal.runs.points = marginal.runs * coefs.for.calc[["r"]],
marginal.hr.points = marginal.hr * coefs.for.calc[["hr"]],
marginal.rbi.points = marginal.rbi * coefs.for.calc[["rbi"]],
marginal.sb.points = marginal.sb * coefs.for.calc[["sb"]],
marginal.avg.points = marginal.avg * coefs.for.calc[["avg"]]/15,
marginal.total.points = (marginal.runs.points +
marginal.hr.points +
marginal.rbi.points +
marginal.avg.points +
marginal.sb.points)*1.2,#this is an adjustment upwards;
#in 2016 calculation, top 270 players
#result in only 735.5 marginal points.
#this means we adjust upwards to make 855
#marginal points (sum(1:18)*5)
#total of 4680 dollars exist in the league. 1700 marginal points exist. Therefore, marginal
#point is worth 4680/1700
dollar.value = marginal.total.points*(4680/1700)
)
}
#calculate values for all of the positions
hitter_projections <- lapply(hitter_projections, calculate.value)
#merge projections for different positions together.
hitter_projections <- do.call(rbind, hitter_projections)
#get player's strongest position
hitter_projections <- hitter_projections %>%
group_by(playerid) %>%
mutate(times.appears = n(), max.points = max(dollar.value)) %>%
filter(position != "dh" | times.appears==1) %>%
filter(dollar.value==max.points) %>%
ungroup() %>%
arrange(desc(dollar.value)) %>%
select(name, Team, position, playerid, AB, R, HR, RBI, SB, AVG, marginal.total.points, dollar.value) %>%
mutate( marginal.total.points = round(marginal.total.points, 2),
dollar.value = round(dollar.value, 2)) %>%
filter(PA > 1)
################################################################
################PITCHER STUFF LIVES HERE########################
################################################################
#read in projections
pitcher_projections <- read.csv("pitchers.csv", stringsAsFactors=FALSE)
#keep only relevant columns
pitcher_projections <- select(pitcher_projections,Name,Team,W,ERA,SV,IP,SO,WHIP,playerid) %>%
mutate(position = "pitcher")
names(pitcher_projections)[c(1, 7)] <- c("name", "K")
#create replacement pitcher values
#these are the mean projections for the 170th through 190th best players
replacement.pitcher <- c(3.761429,1.284286,5.523810,2.952381,88.714286)
names(replacement.pitcher) <- c("ERA.repl","WHIP.repl","W.repl","SV.repl","K.repl")
#calculate marginal values and points
pitcher_projections <- pitcher_projections %>%
mutate(
marginal.ERA = ERA - replacement.pitcher["ERA.repl"],
marginal.WHIP = WHIP - replacement.pitcher["WHIP.repl"],
marginal.W = W - replacement.pitcher["W.repl"],
marginal.SV = SV - replacement.pitcher["SV.repl"],
marginal.K = K - replacement.pitcher["K.repl"],
ERA.points = (marginal.ERA *coefs.for.calc[["era"]])*(IP/1464),
WHIP.points = (marginal.WHIP*coefs.for.calc[["whip"]])*(IP/1464),
W.points = marginal.W*coefs.for.calc[["w"]],
SV.points = marginal.SV*coefs.for.calc[["sv"]],
K.points = marginal.K*coefs.for.calc[["k"]],
marginal.total.points =  1.16*(ERA.points + WHIP.points + W.points + SV.points + K.points),
dollar.value = marginal.total.points*(4680/1700)
) %>%
#sort by dollar value
arrange(desc(dollar.value)) %>%
#select relevant columns
select(name,Team,position,playerid,IP,ERA,WHIP,SV,W,K,marginal.total.points,dollar.value) %>%
#round points and dollars columns
mutate(marginal.total.points = round(marginal.total.points, 2), dollar.value = round(dollar.value, 2)) %>%
#select only pithcers with at least 1 IP
filter(IP > 1)
#create file for player projections
hitterpitcher <- bind_rows(hitter_projections, pitcher_projections) %>%
arrange(desc(dollar.value)) %>%
select(name, Team, position, marginal.total.points, dollar.value)
#write both files out to csv files
write.csv(pitcher_projections, file = "pitcher_projections.csv")
write.csv(hitter_projections, file = "hitter_projections.csv")
write.csv(hitterpitcher, file = "player_projections.csv")
save(hitter_projections, pitcher_projections, file = "projections.rda")
batter_positions <- c("C1","C2","1B","2B","SS","3B","CI","MI","OF1","OF2","OF3","OF4","OF5","OF6","DH")
pitcher_positions <- c("P1","P2","P3","P4","P5","P6","P7","P8","P9","P10")
#read in replacement level hitters
replacement_hitters <- read.csv("replacement_hitters.csv")
rownames(replacement_hitters) <- c("C","1B","2B","SS","3B","MI","CI","OF","DH")
replacement_hitters$AB <- c(400)
replacement_hitters[c("C1","C2"),] <- replacement_hitters["C",]
replacement_hitters[c("OF1","OF2","OF3","OF4","OF5","OF6"),] <- replacement_hitters["OF",]
#read in replacement level pitchers
replacement_pitcher <- c(150,4.47,1.4,4,1,102)
#####################################################################
#############MERGE IN PROJECTIONS FOR EACH PLAYER AND TEAM###########
#####################################################################
for (team in teams) {
temp <- get(team)
#separate hitters and pitchers
hitters <- temp[batter_positions,]
pitchers <- temp[pitcher_positions,]
#merge in projections
hitters <- left_join(hitters, hitter_projections, by = "name")
pitchers <- left_join(pitchers, pitcher_projections, by = "name")
#add columns for stats to team
temp[c("playerid","roster_spot", "AB","R","HR","RBI","SB","AVG","IP","ERA","WHIP","SV","W","K")] <- NA
#reassign rownames to merged projections
rownames(hitters) <- hitters$roster_spot
rownames(pitchers) <- pitchers$roster_spot
#add hitter projections to team
for (position in batter_positions) {
temp[position, c("playerid","AB","R","HR","RBI","SB","AVG")] <-
hitters[position, c("playerid","AB","R","HR","RBI","SB","AVG")]
}
#add pitcher projections to team
for (position in pitcher_positions) {
temp[position, c("playerid","IP","ERA","WHIP","SV","W","K")] <-
pitchers[position, c("playerid","IP","ERA","WHIP","SV","W","K")]
}
#add replacement level stats for empty hitter roster spots
for (position in batter_positions) {
if (temp[position,"name"] == "") {
temp[position,c("AB","R","HR","RBI","SB","AVG")] <- replacement_hitters[position,c("AB","Runs","HR","RBI","SB","AVG")]
}
}
#add replacement level stats for pitcher spots
for (position in pitcher_positions) {
if (temp[position,"name"] == "") {
temp[position,c("IP","ERA","WHIP","SV","W","K")] <- replacement_pitcher
}
}
assign(team, temp)
remove(hitters)
remove(pitchers)
remove(temp)
}
marmaduke
#reorder rows.
for (team in teams) {
temp <- get(team)
temp <- temp[positions,]
assign(team,temp)
}
#calculate standings
source("calculatestandings.R")
warnings()
standings
hitter_projections$status <- ""
pitcher_projections$status <- ""
#Mark drafted hitters as drafted.
for (player in hitter_projections$Name) {
if (player %in% draftpicks$player) {
hitter_projections[which(hitter_projections$Name == player),"status"] <- "drafted"
}
}
#Mark drafted pitchers as drafted.
for (player in pitcher_projections$Name) {
if (player %in% draftpicks$player) {
pitcher_projections[which(pitcher_projections$Name == player),"status"] <- "drafted"
}
}
player_projections <- rbind.all(hitter_projections, pitcher_projections)
library(dplyr)
player_projections <- rbind.all(hitter_projections, pitcher_projections)
player_projections <- rbind_all(hitter_projections, pitcher_projections)
hitter_projections
head(hitter_projections)
rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
rbind.all(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
rbind_all(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
rbind_list(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
hitter_projections$status <- ""
pitcher_projections$status <- ""
#Mark drafted hitters as drafted.
for (player in hitter_projections$Name) {
if (player %in% draftpicks$player) {
hitter_projections[which(hitter_projections$Name == player),"status"] <- "drafted"
}
}
#Mark drafted pitchers as drafted.
for (player in pitcher_projections$Name) {
if (player %in% draftpicks$player) {
pitcher_projections[which(pitcher_projections$Name == player),"status"] <- "drafted"
}
}
#Merge hitter and pitcher projections
player_projections <- rbind.list(hitter_projections, pitcher_projections)
player_projections <- player_projections[order(-player_projections$dollar_value),]
#write player projections to csv
write.csv(player_projections, file = "combined_projections.csv")
player_projections <- rbind_list(hitter_projections, pitcher_projections)
player_projections <- player_projections[order(-player_projections$dollar_value),]
#write player projections to csv
write.csv(player_projections, file = "combined_projections.csv")
player_projections
player_proejctions[1:30]
player_projections[1:30,]
View(player_projections)
pitcher_projections
player_projections <- rbind_list(hitter_projections, pitcher_projections) %>% arrange(dollar.value)
head(player_projections)
player_projections <- rbind_list(hitter_projections, pitcher_projections) %>% arrange(desc(dollar.value))
head(player_projections)
setwd("/home/seanasdf/Documents/rstuff/fantasy")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("hitter_projections.csv") & !file.exists("pitcher_projections.csv")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
player_projections
setwd("/home/seanasdf/Documents/rstuff/fantasy")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("hitter_projections.csv") & !file.exists("pitcher_projections.csv")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
View(hitter_projections)
setwd("/home/seanasdf/Documents/rstuff/fantasy")
library(dplyr)
###Load the coefficients data frame
load("coefs.rda")
###############################################################
################HITTER STUFF LIVES HERE#########################
################################################################
#Import and clean data on replacement levels
#read in league wide csv
replacement_hitters <- read.csv("replacement_hitters.csv", stringsAsFactors = FALSE)
replacement_hitters$Position <- c("catcher",
"first_base",
"second_base",
"shortstop",
"third_base",
"middle_infield",
"corner_infield",
"outfield",
"dh"
)
names(replacement_hitters)[2:6] <- sapply(names(replacement_hitters[c(2:6)]), paste, ".repl", sep="")
#rename columns
names(replacement_hitters) <- c("position",
"runs",
"hr",
"rbi",
"sb",
"avg")
#list of file names
filelocs <- sapply("./steamer/", paste, list.files("./steamer"), sep="")
#read in hitterdata
hitterdata <- lapply(filelocs, read.csv, header=TRUE, stringsAsFactors = FALSE)
#keep only variables I care about
hitterdata <- lapply(hitterdata, select, Name, Team, AB, PA, R,HR, RBI, SB, AVG, OBP, playerid)
#rename columns
hitterdata <- lapply(hitterdata, function(x) {colnames(x)[1] <- "name"
return(x)})
#create projection dataframes for each position
grab.repl <- function(pos) {
temp <- filter(replacement_hitters, position==pos)
names(temp)[2:6] <- sapply(names(temp)[2:6], paste, ".repl", sep="")
return(temp)
}
#1b
first.base.proj <- cbind(hitterdata[[1]], grab.repl("first_base"))
#2b
second.base.proj <- cbind(hitterdata[[2]], grab.repl("second_base"))
#3b
third.base.proj <- cbind(hitterdata[[3]], grab.repl("third_base"))
#C
catcher.proj <- cbind(hitterdata[[4]], grab.repl("catcher"))
#dh
dh.proj <- cbind(hitterdata[[5]], grab.repl("dh"))
#of
of.proj <- cbind(hitterdata[[6]], grab.repl("outfield"))
#SS
shortstop.proj <- cbind(hitterdata[[7]], grab.repl("shortstop"))
#build all positional projections into a list
hitter_projections <- list(first.base.proj,
second.base.proj,
third.base.proj,
catcher.proj,
dh.proj,
of.proj,
shortstop.proj)
#convert coefficients frame to a normal data frame
coefs.for.calc <- as.numeric(coefs$estimate)
names(coefs.for.calc) <- coefs$Category
#create function to calculate value for a position
calculate.value <- function(df) {
mutate(df,
marginal.hr = HR - hr.repl,
marginal.runs = R - runs.repl,
marginal.rbi = RBI - rbi.repl,
marginal.sb = SB - sb.repl,
marginal.avg = AVG - avg.repl,
marginal.runs.points = marginal.runs * coefs.for.calc[["r"]],
marginal.hr.points = marginal.hr * coefs.for.calc[["hr"]],
marginal.rbi.points = marginal.rbi * coefs.for.calc[["rbi"]],
marginal.sb.points = marginal.sb * coefs.for.calc[["sb"]],
marginal.avg.points = marginal.avg * coefs.for.calc[["avg"]]/15,
marginal.total.points = (marginal.runs.points +
marginal.hr.points +
marginal.rbi.points +
marginal.avg.points +
marginal.sb.points)*1.2,#this is an adjustment upwards;
#in 2016 calculation, top 270 players
#result in only 735.5 marginal points.
#this means we adjust upwards to make 855
#marginal points (sum(1:18)*5)
#total of 4680 dollars exist in the league. 1700 marginal points exist. Therefore, marginal
#point is worth 4680/1700
dollar.value = marginal.total.points*(4680/1700)
)
}
#calculate values for all of the positions
hitter_projections <- lapply(hitter_projections, calculate.value)
#merge projections for different positions together.
hitter_projections <- do.call(rbind, hitter_projections)
#get player's strongest position
hitter_projections <- hitter_projections %>%
group_by(playerid) %>%
mutate(times.appears = n(), max.points = max(dollar.value)) %>%
filter(position != "dh" | times.appears==1) %>%
filter(dollar.value==max.points) %>%
ungroup() %>%
arrange(desc(dollar.value)) %>%
select(name, Team, position, playerid, AB, R, HR, RBI, SB, AVG, marginal.total.points, dollar.value) %>%
mutate( marginal.total.points = round(marginal.total.points, 2),
dollar.value = round(dollar.value, 2)) %>%
filter(PA > 1)
################################################################
################PITCHER STUFF LIVES HERE########################
################################################################
#read in projections
pitcher_projections <- read.csv("pitchers.csv", stringsAsFactors=FALSE)
#keep only relevant columns
pitcher_projections <- select(pitcher_projections,Name,Team,W,ERA,SV,IP,SO,WHIP,playerid) %>%
mutate(position = "pitcher")
names(pitcher_projections)[c(1, 7)] <- c("name", "K")
#create replacement pitcher values
#these are the mean projections for the 170th through 190th best players
replacement.pitcher <- c(3.761429,1.284286,5.523810,2.952381,88.714286)
names(replacement.pitcher) <- c("ERA.repl","WHIP.repl","W.repl","SV.repl","K.repl")
#calculate marginal values and points
pitcher_projections <- pitcher_projections %>%
mutate(
marginal.ERA = ERA - replacement.pitcher["ERA.repl"],
marginal.WHIP = WHIP - replacement.pitcher["WHIP.repl"],
marginal.W = W - replacement.pitcher["W.repl"],
marginal.SV = SV - replacement.pitcher["SV.repl"],
marginal.K = K - replacement.pitcher["K.repl"],
ERA.points = (marginal.ERA *coefs.for.calc[["era"]])*(IP/1464),
WHIP.points = (marginal.WHIP*coefs.for.calc[["whip"]])*(IP/1464),
W.points = marginal.W*coefs.for.calc[["w"]],
SV.points = marginal.SV*coefs.for.calc[["sv"]],
K.points = marginal.K*coefs.for.calc[["k"]],
marginal.total.points =  1.16*(ERA.points + WHIP.points + W.points + SV.points + K.points),
dollar.value = marginal.total.points*(4680/1700)
) %>%
#sort by dollar value
arrange(desc(dollar.value)) %>%
#select relevant columns
select(name,Team,position,playerid,IP,ERA,WHIP,SV,W,K,marginal.total.points,dollar.value) %>%
#round points and dollars columns
mutate(marginal.total.points = round(marginal.total.points, 2), dollar.value = round(dollar.value, 2)) %>%
#select only pithcers with at least 1 IP
filter(IP > 1)
#create file for player projections
hitterpitcher <- bind_rows(hitter_projections, pitcher_projections) %>%
arrange(desc(dollar.value)) %>%
select(name, Team, position, marginal.total.points, dollar.value)
#write both files out to csv files
write.csv(pitcher_projections, file = "pitcher_projections.csv")
write.csv(hitter_projections, file = "hitter_projections.csv")
write.csv(hitterpitcher, file = "player_projections.csv")
save(hitter_projections, pitcher_projections, file = "projections.rda")
hitter_projections
